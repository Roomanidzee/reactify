{"version":3,"sources":["serviceWorker.ts","components/third_app/task.tsx","components/third_app/task_list.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskComponent","state","task","id","title","complete","nextProps","this","props","_this$props","handleStatusChange","styles","item","display","flexShrink","alignItems","borderBottom","height","marginBottom","textDecoration","react_default","a","createElement","style","es_checkbox","checked","marginRight","onChange","event","target","React","Component","initialState","input","tasks","TaskListComponent","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","inputRef","createRef","handleTaskCreation","newTasks","_","cloneDeep","length","push","setState","previousState","taskId","map","bind","assertThisInitialized","current","focus","_this2","taskComponents","task_TaskComponent","key","className","width","justifyContent","paddingBottom","value","onKeyPress","placeholder","es_button","type","onClick","card","bodyStyle","flexDirection","flexGrow","container","document","getElementById","ReactDOM","render","task_list_TaskListComponent","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60bfdb7c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { Checkbox } from \"antd\";\n\ninterface ComponentFunctions {\n    handleStatusChange: (taskId: number, complete: boolean) => void\n}\n\nconst initialState = {\n    task : {\n        id: 0,\n        title: \"test\",\n        complete: false\n    },\n};\n\ntype State = Readonly<typeof initialState>;\n\ntype Props = {\n    task: State[\"task\"],\n    handleStatusChange: ComponentFunctions[\"handleStatusChange\"]\n}\n\nexport default class TaskComponent extends React.Component<Props, State>{\n\n    state: Readonly<State> = {\n        task : {\n            id: 0,\n            title: \"test\",\n            complete: false\n        }\n    };\n\n    shouldComponentUpdate(nextProps: Readonly<Props>): boolean {\n        return nextProps.task !== this.props.task;\n    }\n\n    render(): React.ReactNode {\n\n        const { task, handleStatusChange } = this.props;\n\n        let styles = {\n            item: {\n                display: \"flex\",\n                flexShrink: 0,\n                alignItems: \"center\",\n                borderBottom: \"solid 1px #E0E0E0\",\n                height: 46\n            },\n            title: {\n                marginBottom: 0,\n                textDecoration: \"\"\n            }\n        };\n\n        if (task.complete) {\n            styles.title.textDecoration = \"line-through\";\n        }\n\n        return(\n\n            <div style={styles.item}>\n                <Checkbox\n                    checked={task.complete}\n                    style={{ marginRight: 8 }}\n                    onChange={event => handleStatusChange(task.id, event.target.checked)}\n                />\n                <h4 style={styles.title}>{task.title}</h4>\n            </div>\n\n        );\n\n    }\n\n}\n","import React from \"react\";\n\nimport { Card, Button, Input, Empty } from \"antd\";\nimport TaskComponent from \"./task\";\nimport _ from \"lodash\";\n\nimport '../../assets/styles/third_app/TaskListComponent.css';\n\nconst initialState = {\n  input: \"\",\n  tasks: [{id: 0, title: \"test\", complete: false}]\n};\n\ntype State = Readonly<typeof initialState>;\n\ntype Props = {\n    input?: State[\"input\"],\n    tasks?: State[\"tasks\"]\n}\n\nexport default class TaskListComponent extends React.Component<Props, State>{\n\n    inputRef: React.RefObject<HTMLInputElement> = React.createRef();\n    readonly state: State = initialState;\n\n    constructor(props: Props){\n        super(props);\n\n        this.handleTaskCreation = this.handleTaskCreation.bind(this);\n        this.handleStatusChange = this.handleStatusChange.bind(this);\n\n    }\n\n    componentDidMount(): void {\n\n        if(this.inputRef.current){\n            this.inputRef.current.focus();\n        }\n\n    }\n\n    handleTaskCreation = () => {\n\n        const newTasks = _.cloneDeep(this.state.tasks);\n\n        const task = {\n            id: newTasks.length > 0 ? newTasks[newTasks.length - 1].id + 1 : 0,\n            title: this.state.input,\n            complete: false\n        };\n\n        newTasks.push(task);\n        this.setState((previousState: State, props: Props) => {\n\n            return {\n                tasks: newTasks,\n                input: \"\"\n            }\n\n        });\n\n    };\n\n    handleStatusChange = (taskId: number, complete: boolean) => {\n\n        let tasks = _.cloneDeep(this.state.tasks);\n\n        const newTasks = tasks.map(task => {\n\n           if(task.id === taskId){\n               task.complete = complete;\n           }\n\n           return task;\n\n        });\n\n        this.setState((previousState: State, props: Props) => {\n\n            return {\n                tasks: newTasks\n            }\n\n        });\n\n    };\n\n    render(): React.ReactNode {\n\n        let taskComponents = this.state.tasks.map(task => (\n            <TaskComponent\n                key={task.id}\n                task={task}\n                handleStatusChange={this.handleStatusChange}\n            />\n        ));\n\n        if (taskComponents.length === 0) {\n            taskComponents = [];\n        }\n\n        return (\n            <div className=\"App\">\n                <div className=\"Content\">\n                    <div\n                        style={{\n                            width: 400,\n                            display: \"flex\",\n                            justifyContent: \"flex-end\",\n                            paddingBottom: 8\n                        }}\n                    >\n                        <Input\n                            value={this.state.input}\n                            onChange={event => this.setState({ input: event.target.value })}\n                            onKeyPress={event => {\n                                if (event.key === \"Enter\") {\n                                    this.handleTaskCreation();\n                                }\n                            }}\n                            placeholder=\"New task\"\n                            style={{ marginRight: 8 }}\n                        />\n                        <Button type=\"primary\" onClick={this.handleTaskCreation}>\n                            Добавить\n                        </Button>\n                    </div>\n                    <Card\n                        style={{ width: 400 }}\n                        bodyStyle={{\n                            height: \"100%\",\n                            display: \"flex\",\n                            flexDirection: \"column\"\n                        }}\n                    >\n                        <div style={{ flexGrow: 1 }}>{taskComponents}</div>\n                    </Card>\n                </div>\n            </div>\n        );\n\n    }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport TaskListComponent from \"./components/third_app/task_list\";\n\nconst container = document.getElementById(\"root\");\nReactDOM.render(<TaskListComponent />, container);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}