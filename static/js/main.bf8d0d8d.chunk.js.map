{"version":3,"sources":["serviceWorker.ts","utils/second_app/index.ts","components/second_app/card_with_users.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","UserCardUtils","Math","floor","random","initialState","users","id","nickname","UserCardComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleAddUser","setState","previousState","console","log","newUserID","getRandomNumber","newUserNickname","concat","push","handleUpdateUser","filter","user","handleDeleteUser","deleteIndex","findIndex","splice","bind","assertThisInitialized","_this2","userItems","map","react_default","a","createElement","className","key","icon","type","onClick","card","title","headStyle","textAlign","es_button","React","Component","container","document","getElementById","ReactDOM","render","card_with_users_UserCardComponent","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8JCjBeC,iHAOb,OAAQC,KAAKC,MAAM,GAAAD,KAAKE,UAHZ,WCCdC,UAAe,CAACC,MAAO,CAAC,CAAEC,GAAI,EAAGC,SAAU,+BAS5BC,cAIjB,SAAAA,EAAYC,GAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACrBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAHDQ,MAAeb,EAECM,EASzBQ,cAAgB,WAEZR,EAAKS,SAAS,SAACC,EAAsBX,GAEjCY,QAAQC,IAAI,qDAFsC,IAI7CjB,EAASe,EAATf,MAEDkB,EAAYvB,EAAcwB,kBAC1BC,EAAe,6BAAAC,OAAYH,GAI/B,OAFAlB,EAAMsB,KAAK,CAACrB,GAAIiB,EAAWhB,SAAUkB,IAE9B,CACHpB,MAAOA,MAvBMK,EA8BzBkB,iBAAmB,SAACtB,GAEhBI,EAAKS,SAAS,SAACC,EAAsBX,GAAiB,IAE7CJ,EAASe,EAATf,MAML,OAJoBA,EAAMwB,OAAO,SAAAC,GAAI,OAAIA,EAAKxB,KAAOA,IAAI,GAE3CC,SAAd,6BAAAmB,OAAkC1B,EAAcwB,mBAEzC,CACHnB,MAAOA,MAzCMK,EAgDzBqB,iBAAmB,SAACzB,GAEhBI,EAAKS,SAAS,SAACC,EAAsBX,GAAiB,IAE7CJ,EAASe,EAATf,MACD2B,EAAc3B,EAAM4B,UAAU,SAAAH,GAAI,OAAIA,EAAKxB,KAAOA,IAGtD,OAFAD,EAAM6B,OAAOF,EAAa,GAEnB,CACH3B,MAAOA,MAtDfK,EAAKQ,cAAgBR,EAAKQ,cAAciB,KAAnBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KACrBA,EAAKkB,iBAAmBlB,EAAKkB,iBAAiBO,KAAtBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KACxBA,EAAKqB,iBAAmBrB,EAAKqB,iBAAiBI,KAAtBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KALHA,wEAgEC,IAAA2B,EAAAxB,KAGhByB,EADUzB,KAAKI,MAAdZ,MACiBkC,IAAI,SAAAT,GAExB,OACIU,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcC,IAAOd,EAAKxB,IAClCwB,EAAKvB,SACNiC,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,OAAOC,QAAS,kBAAKV,EAAKT,iBAAiBE,EAAKxB,OAC3DkC,EAAAC,EAAAC,cAAAG,EAAA,GAAMC,KAAK,SAASC,QAAS,kBAAKV,EAAKN,iBAAiBD,EAAKxB,UAOzE,OAEIkC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEXH,EAAAC,EAAAC,cAAAM,EAAA,GAAMC,MAAM,2EAAeC,UAAW,CAACC,UAAW,WAAYb,GAE9DE,EAAAC,EAAAC,cAAAU,EAAA,GAAQN,KAAK,UAAUC,QAAS,kBAAMV,EAAKnB,kBAA3C,qIA1F+BmC,IAAMC,WCT/CC,EAAYC,SAASC,eAAe,QAC1CC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAAuBL,GHkIjC,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bf8d0d8d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nexport default class UserCardUtils {\n\n    static getRandomNumber(){\n\n        const min = 1;\n        const max = 20;\n\n        return  Math.floor(Math.random() * (max - min + 1)) + min;\n\n    }\n\n}\n","import React from \"react\";\nimport UserCardUtils from \"../../utils/second_app\";\n\nimport { Button, Card } from \"antd\";\nimport {Icon} from \"antd\";\n\nconst initialState = {users: [{ id: 0, nickname: \"Вано\" }]};\ntype State = Readonly<typeof initialState>;\n\ntype Props = {\n    users?: State[\"users\"]\n}\n\nimport '../../assets/styles/UserCardComponent.css';\n\nexport default class UserCardComponent extends React.Component<Props, State>{\n\n    readonly state: State = initialState;\n\n    constructor(props: Props){\n        super(props);\n\n        this.handleAddUser = this.handleAddUser.bind(this);\n        this.handleUpdateUser = this.handleUpdateUser.bind(this);\n        this.handleDeleteUser = this.handleDeleteUser.bind(this);\n\n    }\n\n    handleAddUser = () => {\n\n        this.setState((previousState: State, props: Props) => {\n\n            console.log(\"Я РАБОТАЮ\");\n\n            let {users} = previousState;\n\n            let newUserID = UserCardUtils.getRandomNumber();\n            let newUserNickname = `Вано #${newUserID}`;\n\n            users.push({id: newUserID, nickname: newUserNickname});\n\n            return {\n                users: users\n            }\n\n        });\n\n    };\n\n    handleUpdateUser = (id: number) => {\n\n        this.setState((previousState: State, props: Props) => {\n\n            let {users} = previousState;\n\n            let userForUpdate = users.filter(user => user.id === id)[0];\n\n            userForUpdate.nickname = `Вано #${UserCardUtils.getRandomNumber()}`;\n\n            return {\n                users: users\n            }\n\n        });\n\n    };\n\n    handleDeleteUser = (id: number) => {\n\n        this.setState((previousState: State, props: Props) => {\n\n            let {users} = previousState;\n            let deleteIndex = users.findIndex(user => user.id === id);\n            users.splice(deleteIndex, 1);\n\n            return {\n                users: users\n            }\n\n        });\n\n    };\n\n    render(): React.ReactNode {\n\n        const {users} = this.state;\n        const userItems = users.map(user => {\n\n            return (\n                <p className=\"center_text\" key = {user.id}>\n                    {user.nickname}\n                    <Icon type=\"edit\" onClick={() =>this.handleUpdateUser(user.id)}/>\n                    <Icon type=\"delete\" onClick={() =>this.handleDeleteUser(user.id)}/>\n                </p>\n            );\n\n        });\n\n\n        return(\n\n            <div className=\"center_div\">\n\n                <Card title=\"Пользователи\" headStyle={{textAlign: \"center\"}}>{userItems}</Card>\n\n                <Button type=\"primary\" onClick={() => this.handleAddUser()} >\n                    Добавить пользователя\n                </Button>\n\n            </div>\n\n        );\n\n    };\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport UserCardComponent from \"./components/second_app/card_with_users\";\n\nconst container = document.getElementById(\"root\");\nReactDOM.render(<UserCardComponent />, container);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}