{"version":3,"sources":["serviceWorker.ts","components/fourth_app/custom_select.tsx","components/fourth_app/inner_form.tsx","components/fourth_app/main_form.tsx","components/fourth_app/main_page.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","options","value","label","CustomSelect","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","onChange","handleBlur","onBlur","react_default","a","createElement","htmlFor","react_select_esm","id","isMulti","error","touched","style","color","marginTop","React","Component","InnerForm","values","errors","setFieldValue","setFieldTouched","isSubmitting","message","formik_esm","type","name","placeholder","nickname","custom_select_CustomSelect","gender","phoneNumber","email","textStory","filmsAndSeries","disabled","MainForm","withFormik","mapPropsToValues","validationSchema","Yup","shape","max","required","of","matches","handleSubmit","_ref","setSubmitting","alert","initialState","FormExampleComponent","state","main_form","container","document","getElementById","ReactDOM","render","main_page_FormExampleComponent","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b2f09cc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport Select from \"react-select\";\nimport {Gender} from \"./props_and_values\";\nimport {ValueType} from \"react-select/lib/types\";\n\ninterface State {\n\n    value: Array<Gender>;\n    onChange: Function;\n    onBlur: Function;\n    error: string;\n    touched: boolean;\n\n}\n\n\ntype Props = {\n\n    value?: State[\"value\"];\n    onChange?: Function;\n    onBlur?: Function;\n    error?: string;\n    touched?: boolean;\n\n};\n\nconst options = [\n    {value: \"male\", label: \"Мужской пол\"},\n    {value: \"female\", label: \"Женский пол\"}\n];\n\nexport default class CustomSelect extends React.Component<Props, State> {\n\n    constructor(props : Props){\n        super(props);\n    }\n\n    handleChange = (value: ValueType<Gender>) => {\n\n        if(this.props.onChange){\n            this.props.onChange('gender', value);\n        }\n\n    };\n\n    handleBlur = () => {\n\n        if(this.props.onBlur){\n            this.props.onBlur('gender', true);\n        }\n\n    };\n\n    render(): React.ReactNode{\n\n        return (\n\n            <div>\n                <label htmlFor=\"gender\">Гендерная принадлежность</label>\n                <Select\n                    id=\"color\"\n                    options={options}\n                    isMulti\n                    onChange={this.handleChange}\n                    onBlur={this.handleBlur}\n                    value={this.props.value}\n                />\n                {!!this.props.error && this.props.touched && (\n                    <div style={{ color: \"red\", marginTop: \".5rem\" }}>\n                        {this.props.error}\n                    </div>\n                )}\n            </div>\n\n\n        );\n\n    }\n\n}\n","import React from \"react\";\n\nimport {Form, Field, InjectedFormikProps} from 'formik';\nimport {FormProps, FormValues} from \"./props_and_values\";\nimport CustomSelect from \"./custom_select\";\n\nconst InnerForm: React.FunctionComponent<InjectedFormikProps<FormProps, FormValues>> = (props) =>{\n\n    const {\n        values,\n        touched,\n        errors,\n        setFieldValue,\n        setFieldTouched,\n        isSubmitting,\n        message\n    } = props;\n\n    return (\n        <Form>\n            <h1>{message}</h1>\n\n            <Field type=\"input\" name=\"nickname\" placeholder=\"Никнейм\"/>\n            {touched.nickname && errors.nickname && <div>{errors.nickname}</div>}\n\n            <br/>\n\n            <CustomSelect\n\n                value={values.gender}\n                onChange={setFieldValue}\n                onBlur={setFieldTouched}\n\n            />\n\n            <br/>\n\n            <Field type=\"phone\" name=\"phoneNumber\" placeholder=\"Номер телефона\"/>\n            {touched.phoneNumber && errors.phoneNumber && <div>{errors.phoneNumber}</div>}\n\n            <br/>\n\n            <Field type=\"email\" name=\"email\" placeholder = \"Электронная почта\"/>\n            {touched.email && errors.email && <div>{errors.email}</div>}\n\n            <br/>\n\n            <Field type=\"textarea\" name=\"textStory\" placeholder=\"Немного о себе\"/>\n            {touched.textStory && errors.textStory && <div>{errors.textStory}</div>}\n\n            <br/>\n\n            <Field type=\"textarea\" name=\"filmsAndSeries\" placeholder=\"Ваши фильмы и сериалы\"/>\n            {touched.filmsAndSeries && errors.filmsAndSeries && <div>{errors.filmsAndSeries}</div>}\n\n            <br/>\n\n            <button type=\"submit\" disabled={isSubmitting}>\n                Отправить\n            </button>\n        </Form>\n    );\n\n};\n\nexport default InnerForm;\n","import * as Yup from 'yup';\nimport {withFormik} from 'formik';\nimport {FormProps, FormValues} from \"./props_and_values\";\nimport InnerForm from \"./inner_form\";\n\nconst phoneRegexp = /^(\\+7|7|8)?[\\s\\-]?\\(?[489][0-9]{2}\\)?[\\s\\-]?[0-9]{3}[\\s\\-]?[0-9]{2}[\\s\\-]?[0-9]{2}$/;\n\nconst MainForm = withFormik<FormProps, FormValues>({\n\n   mapPropsToValues: props => {\n\n       return {\n           nickname: '',\n           gender: [],\n           phoneNumber: '',\n           email: '',\n           textStory: '',\n           filmsAndSeries: '',\n           message: ''\n       };\n\n   },\n\n   validationSchema: Yup.object().shape({\n\n       nickname: Yup.string()\n                     .max(30, \"Предел имени в сервисе - 30 символов\")\n                     .required(\"Введите своё имя в сервисе\"),\n\n       gender: Yup.array()\n                  .max(1, \"У человека только один гендер!\")\n                  .of(\n                     Yup.object().shape({\n                         label: Yup.string()\n                                   .required(),\n\n                         value: Yup.string()\n                                   .required()\n                     })\n                  ),\n\n       phoneNumber: Yup.string()\n                       .matches(phoneRegexp, \"Неправильно введён номер телефона\"),\n\n       email: Yup.string()\n                 .email(\"Неправильно введён адрес электронной почты\"),\n\n       textStory: Yup.string()\n                     .required(\"Напишите немного информации о себе\"),\n\n       filmsAndSeries: Yup.string()\n                          .required(\"Опишите ваши любимые фильмы и сериалы\")\n\n   }),\n\n   handleSubmit: (values, { setSubmitting }) => {\n\n       alert(\"Данные сохранены!\");\n       setSubmitting(true);\n\n   },\n\n})(InnerForm);\n\nexport default MainForm;\n","import React from \"react\";\nimport MainForm from \"./main_form\";\n\nconst initialState = {\n    message: \"\"\n};\n\ntype State = Readonly<typeof initialState>;\ntype Props = {\n    message?: State[\"message\"]\n}\n\nexport default class FormExampleComponent extends React.Component<Props, State> {\n\n    readonly state: State = initialState;\n\n    constructor(props: Props){\n        super(props);\n    }\n\n    render(): React.ReactNode {\n\n        return(\n            <div>\n               <MainForm message=\"Пример формы ввода данных\" />\n            </div>\n        )\n\n    }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport FormExampleComponent from \"./components/fourth_app/main_page\";\n\nconst container = document.getElementById(\"root\");\nReactDOM.render(<FormExampleComponent />, container);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}