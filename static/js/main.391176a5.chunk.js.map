{"version":3,"sources":["utils/index.ts","constants/index.ts","components/temperature_input.tsx","components/calculator.tsx","serviceWorker.ts","index.tsx"],"names":["TemperatureUtils","fahrenheit","celsius","temperature","convert_func","input","parseFloat","Number","isNaN","output","Math","round","toString","SCALE_NAMES","c","f","initialState","scale","onTemperatureChange","TemperatureInput","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","inherits","createClass","key","value","e","target","react_default","a","createElement","onChange","React","Component","initialCalculatorState","BoilingVerdict","Calculator","handleCelsius","setState","convertToCelsius","handleFahrenheit","convertToFahrenheit","tryConvert","toCelsius","toFahrenheit","temperature_input_TemperatureInput","calculator_BoilingVerdict","previousState","Boolean","window","location","hostname","match","container","document","getElementById","ReactDOM","render","calculator_Calculator","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.391176a5.chunk.js","sourcesContent":["\nexport default class TemperatureUtils{\n\n    static toCelsius(fahrenheit: number){\n       return (fahrenheit - 32) * 5 / 9;\n    }\n\n    static toFahrenheit(celsius: number){\n        return (celsius * 9 / 5) + 32;\n    }\n\n    static tryConvert(temperature: string, convert_func: Function){\n\n        const input = parseFloat(temperature);\n\n        if(Number.isNaN(input)){\n            return '';\n        }\n\n        const output = convert_func(input);\n        const rounded = Math.round(output * 1000) / 1000;\n        return rounded.toString();\n\n    }\n}\n","export const SCALE_NAMES: any = {\n    c: \"градусах Цельсия\",\n    f: \"градусах Фаренгейта\"\n};\n","import React from \"react\";\nimport {SCALE_NAMES} from \"../constants\";\n\nconst initialState = {temperature: '', scale: '', onTemperatureChange: {}};\ntype State = Readonly<typeof initialState>;\n\ntype TemperatureInputProps = {\n    temperature: State['temperature'];\n    scale: State['scale'];\n    onTemperatureChange: State['onTemperatureChange'];\n}\n\nexport class TemperatureInput extends React.Component<TemperatureInputProps, State>{\n\n    readonly state: State = initialState;\n\n    constructor(props: TemperatureInputProps) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e: any) {\n        // баг, надо исправить\n        // @ts-ignore\n        this.props.onTemperatureChange(e.target.value);\n    }\n\n    render(): React.ReactNode {\n        const temperature = this.props.temperature;\n        const scale = this.props.scale;\n        return (\n            <fieldset>\n                <legend>Введите температуру в {SCALE_NAMES[scale]}:</legend>\n                <input value={temperature}\n                       onChange={this.handleChange} />\n            </fieldset>\n        );\n    }\n\n}\n","import React from \"react\";\nimport TemperatureUtils from \"../utils\";\nimport {TemperatureInput} from \"./temperature_input\";\n\nconst initialBoilingState = {celsius: 0};\nconst initialCalculatorState = {temperature: '', scale: 'c'};\n\ntype BoilingState = Readonly<typeof initialBoilingState>;\ntype CalculatorState = Readonly<typeof initialCalculatorState>;\n\ntype BoilingProps = {\n    celsius: BoilingState['celsius'];\n}\n\ntype CalculatorProps = {\n    temperature?: CalculatorState['temperature'];\n    scale?: CalculatorState['scale'];\n}\n\nconst BoilingVerdict: React.FunctionComponent<BoilingProps> = (props) => {\n\n    if (props.celsius >= 100) {\n        return <p>Вода станет кипятком.</p>;\n    }\n    return <p>Вода не станет кипятком.</p>;\n\n};\n\nexport class Calculator extends React.Component<CalculatorProps, CalculatorState>{\n\n    readonly state: CalculatorState = initialCalculatorState;\n\n    private handleCelsius = () => this.setState(convertToCelsius);\n    private handleFahrenheit = () => this.setState(convertToFahrenheit);\n\n    constructor(props: CalculatorProps){\n        super(props);\n        this.handleCelsius = this.handleCelsius.bind(this);\n        this.handleFahrenheit = this.handleFahrenheit.bind(this);\n    }\n\n    render(): React.ReactNode {\n\n        const scale = this.state.scale;\n        const temperature = this.state.temperature;\n        const celsius = scale === 'f' ? TemperatureUtils.tryConvert(temperature, TemperatureUtils.toCelsius) : temperature;\n        const fahrenheit = scale === 'c' ? TemperatureUtils.tryConvert(temperature, TemperatureUtils.toFahrenheit) : temperature;\n\n        return (\n            <div>\n                <TemperatureInput\n                    scale=\"c\"\n                    temperature={celsius}\n                    onTemperatureChange={this.handleCelsius} />\n                <TemperatureInput\n                    scale=\"f\"\n                    temperature={fahrenheit}\n                    onTemperatureChange={this.handleFahrenheit} />\n                <BoilingVerdict\n                    celsius={parseFloat(celsius)} />\n            </div>\n        );\n\n    }\n\n}\n\nconst convertToCelsius = (previousState: CalculatorState) => ({scale: 'c', temperature: previousState.temperature});\nconst convertToFahrenheit =\n    (previousState: CalculatorState) => ({scale: 'f', temperature: previousState.temperature});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {Calculator} from \"./components/calculator\";\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst container = document.getElementById(\"root\");\nReactDOM.render(<Calculator />, container);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}